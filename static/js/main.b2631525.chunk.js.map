{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","diameter","setDiameter","shapeCode","setShapeCode","aValue","setAValue","bValue","setBValue","cValue","setCValue","className","colspan","id","onChange","evt","target","value","type","onClick","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,kC,qHCkH5BC,MA9Gf,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACPC,EADO,KACEC,EADF,OAEiBF,mBAAS,GAF1B,mBAEPG,EAFO,KAEGC,EAFH,OAGWJ,mBAAS,GAHpB,mBAGPK,EAHO,KAGAC,EAHA,OAIWN,mBAAS,GAJpB,mBAIPO,EAJO,KAIAC,EAJA,OAKWR,mBAAS,GALpB,mBAKPS,EALO,KAKAC,EALA,KAkCb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACf,2BAAOA,UAAU,SACjB,4BACE,wBAAIC,QAAQ,KAAZ,qBAEN,4BACE,6CACA,mCACA,iCACA,iCACA,kCAEF,4BACE,4BACI,4BAAQC,GAAG,WAAWC,SA3Cb,SAACC,GACdb,EAAYa,EAAIC,OAAOC,SA2Cf,4BAAQA,MAAM,MAAd,OACA,4BAAQA,MAAM,MAAd,OACA,4BAAQA,MAAM,MAAd,SAGR,4BACI,4BAAQJ,GAAG,WAAWC,SA5CZ,SAACC,GACfX,EAAaW,EAAIC,OAAOC,SA4ChB,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,QAGJ,4BACA,2BAAON,UAAU,UAAUO,KAAK,OAAOJ,SA9CxB,SAACC,GACpBT,EAAUS,EAAIC,OAAOC,WA+CjB,4BACE,2BAAON,UAAU,UAAUO,KAAK,OAAOJ,SA9C1B,SAACC,GACpBP,EAAUO,EAAIC,OAAOC,WA+CjB,4BACE,2BAAON,UAAU,UAAUO,KAAK,OAAOJ,SA9C1B,SAACC,GACpBL,EAAUK,EAAIC,OAAOC,aAiDzB,4BAAQC,KAAK,SAASP,UAAU,kBAAkBQ,QA9CnC,WACfC,QAAQC,IAAI,YAAYpB,GACxBmB,QAAQC,IAAI,cAAclB,GAC1BiB,QAAQC,IAAI,KAAKhB,GACjBe,QAAQC,IAAI,KAAKd,GACjBa,QAAQC,IAAI,KAAKZ,KAyCjB,WAEA,yBAAKE,UAAU,aACT,2BAAOA,UAAU,SACf,4BACA,wBAAIC,QAAQ,KAAZ,mBAEN,4BACE,6CACA,mCACA,iCACA,iCACA,kCAEF,4BACE,4BACIX,GAEJ,4BACKE,GAED,4BACCE,GAED,4BACEE,GAEF,4BACEE,Q,MC7FUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.b2631525.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n const [diameter,setDiameter]=useState(0);\n const [shapeCode,setShapeCode]=useState(0);\n const [aValue,setAValue]=useState(0);\n const [bValue,setBValue]=useState(0);\n const [cValue,setCValue]=useState(0);\n\n  const zmiana = (evt) => {\n    setDiameter(evt.target.value);\n    \n   \n    \n  }\n  const zmiana2 = (evt) => {\n    setShapeCode(evt.target.value);\n    \n  }\n  const zmianaInputA = (evt) => {\n    setAValue(evt.target.value);\n  }\n  const zmianaInputB = (evt) => {\n    setBValue(evt.target.value);\n  }\n  const zmianaInputC = (evt) => {\n    setCValue(evt.target.value);\n  }\n\n  const print =() => {\nconsole.log(\"Srednica:\"+diameter);\nconsole.log(\"Shape code:\"+shapeCode);\nconsole.log(\"A:\"+aValue);\nconsole.log(\"B:\"+bValue);\nconsole.log(\"C:\"+cValue);\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n      <table className=\"table\">\n      <tr>\n        <th colspan=\"5\">Insert your Data</th>\n        </tr>\n  <tr>\n    <th>Średnica</th>\n    <th>Kod</th> \n    <th>A</th>\n    <th>B</th>\n    <th>C</th>\n  </tr>\n  <tr>\n    <td> \n        <select id=\"diameter\" onChange={zmiana}>\n            <option value=\"10\">H10</option>\n            <option value=\"12\">H12</option>\n            <option value=\"16\">H16</option>\n        </select>\n  </td>\n    <td>\n        <select id=\"diameter\" onChange={zmiana2}>\n            <option value=\"21\">21</option>\n            <option value=\"10\">10</option>\n        </select>\n    </td>\n        <td>\n        <input className=\"myInput\" type=\"text\" onChange={zmianaInputA}/>\n        </td>\n        <td>\n          <input className=\"myInput\" type=\"text\" onChange={zmianaInputB}/>\n        </td>\n        <td>\n          <input className=\"myInput\" type=\"text\" onChange={zmianaInputC}/>\n        </td>\n  </tr>\n</table>\n<button type=\"button\" className=\"btn btn-primary\" onClick={print}>Oblicz</button>\n</div>\n<div className=\"container\">\n      <table className=\"table\">\n        <tr>\n        <th colspan=\"5\">Converted Data</th>\n        </tr>\n  <tr>\n    <th>Średnica</th>\n    <th>Kod</th> \n    <th>A</th>\n    <th>B</th>\n    <th>C</th>\n  </tr>\n  <tr>\n    <td> \n       {diameter}\n  </td>\n    <td>\n        {shapeCode}\n    </td>\n        <td>\n        {aValue}\n        </td>\n        <td>\n         {bValue}\n        </td>\n        <td>\n         {cValue}\n        </td>\n  </tr>\n</table>\n</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}